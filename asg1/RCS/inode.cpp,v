head	1.255;
access;
symbols;
locks;
comment	@// @;


1.255
date	2013.01.22.00.05.56;	author -;	state -;
branches;
next	1.254;

1.254
date	2013.01.21.23.40.35;	author -;	state -;
branches;
next	1.253;

1.253
date	2013.01.21.23.10.51;	author -;	state -;
branches;
next	1.252;

1.252
date	2013.01.21.23.09.54;	author -;	state -;
branches;
next	1.251;

1.251
date	2013.01.21.22.59.36;	author -;	state -;
branches;
next	1.250;

1.250
date	2013.01.21.22.59.14;	author -;	state -;
branches;
next	1.249;

1.249
date	2013.01.21.22.57.43;	author -;	state -;
branches;
next	1.248;

1.248
date	2013.01.21.22.57.17;	author -;	state -;
branches;
next	1.247;

1.247
date	2013.01.21.22.15.29;	author -;	state -;
branches;
next	1.246;

1.246
date	2013.01.21.22.14.37;	author -;	state -;
branches;
next	1.245;

1.245
date	2013.01.21.22.06.49;	author -;	state -;
branches;
next	1.244;

1.244
date	2013.01.21.21.12.22;	author -;	state -;
branches;
next	1.243;

1.243
date	2013.01.21.20.24.16;	author -;	state -;
branches;
next	1.242;

1.242
date	2013.01.21.20.18.42;	author -;	state -;
branches;
next	1.241;

1.241
date	2013.01.21.20.15.58;	author -;	state -;
branches;
next	1.240;

1.240
date	2013.01.21.20.01.30;	author -;	state -;
branches;
next	1.239;

1.239
date	2013.01.21.19.54.53;	author -;	state -;
branches;
next	1.238;

1.238
date	2013.01.21.19.39.07;	author -;	state -;
branches;
next	1.237;

1.237
date	2013.01.21.19.30.57;	author -;	state -;
branches;
next	1.236;

1.236
date	2013.01.21.19.25.29;	author -;	state -;
branches;
next	1.235;

1.235
date	2013.01.21.19.19.20;	author -;	state -;
branches;
next	1.234;

1.234
date	2013.01.21.19.02.16;	author -;	state -;
branches;
next	1.233;

1.233
date	2013.01.21.19.00.34;	author -;	state -;
branches;
next	1.232;

1.232
date	2013.01.21.18.59.39;	author -;	state -;
branches;
next	1.231;

1.231
date	2013.01.21.18.23.18;	author -;	state -;
branches;
next	1.230;

1.230
date	2013.01.20.22.35.16;	author -;	state -;
branches;
next	1.229;

1.229
date	2013.01.20.22.34.21;	author -;	state -;
branches;
next	1.228;

1.228
date	2013.01.20.22.33.57;	author -;	state -;
branches;
next	1.227;

1.227
date	2013.01.20.22.33.33;	author -;	state -;
branches;
next	1.226;

1.226
date	2013.01.20.22.16.49;	author -;	state -;
branches;
next	1.225;

1.225
date	2013.01.20.22.11.06;	author -;	state -;
branches;
next	1.224;

1.224
date	2013.01.20.21.53.26;	author -;	state -;
branches;
next	1.223;

1.223
date	2013.01.20.21.52.01;	author -;	state -;
branches;
next	1.222;

1.222
date	2013.01.20.21.34.50;	author -;	state -;
branches;
next	1.221;

1.221
date	2013.01.20.21.32.07;	author -;	state -;
branches;
next	1.220;

1.220
date	2013.01.20.21.31.18;	author -;	state -;
branches;
next	1.219;

1.219
date	2013.01.20.21.29.11;	author -;	state -;
branches;
next	1.218;

1.218
date	2013.01.20.21.28.02;	author -;	state -;
branches;
next	1.217;

1.217
date	2013.01.20.21.25.14;	author -;	state -;
branches;
next	1.216;

1.216
date	2013.01.20.21.15.07;	author -;	state -;
branches;
next	1.215;

1.215
date	2013.01.20.21.14.39;	author -;	state -;
branches;
next	1.214;

1.214
date	2013.01.20.21.11.58;	author -;	state -;
branches;
next	1.213;

1.213
date	2013.01.20.21.04.32;	author -;	state -;
branches;
next	1.212;

1.212
date	2013.01.20.21.02.55;	author -;	state -;
branches;
next	1.211;

1.211
date	2013.01.20.20.58.24;	author -;	state -;
branches;
next	1.210;

1.210
date	2013.01.20.20.58.02;	author -;	state -;
branches;
next	1.209;

1.209
date	2013.01.20.20.57.01;	author -;	state -;
branches;
next	1.208;

1.208
date	2013.01.20.20.51.00;	author -;	state -;
branches;
next	1.207;

1.207
date	2013.01.20.20.43.28;	author -;	state -;
branches;
next	1.206;

1.206
date	2013.01.20.20.41.38;	author -;	state -;
branches;
next	1.205;

1.205
date	2013.01.20.20.40.27;	author -;	state -;
branches;
next	1.204;

1.204
date	2013.01.20.20.37.31;	author -;	state -;
branches;
next	1.203;

1.203
date	2013.01.20.20.36.59;	author -;	state -;
branches;
next	1.202;

1.202
date	2013.01.20.20.36.13;	author -;	state -;
branches;
next	1.201;

1.201
date	2013.01.20.20.35.47;	author -;	state -;
branches;
next	1.200;

1.200
date	2013.01.20.20.35.06;	author -;	state -;
branches;
next	1.199;

1.199
date	2013.01.20.20.34.39;	author -;	state -;
branches;
next	1.198;

1.198
date	2013.01.20.20.30.07;	author -;	state -;
branches;
next	1.197;

1.197
date	2013.01.20.20.29.30;	author -;	state -;
branches;
next	1.196;

1.196
date	2013.01.20.20.16.52;	author -;	state -;
branches;
next	1.195;

1.195
date	2013.01.20.20.14.20;	author -;	state -;
branches;
next	1.194;

1.194
date	2013.01.20.00.48.49;	author -;	state -;
branches;
next	1.193;

1.193
date	2013.01.20.00.47.35;	author -;	state -;
branches;
next	1.192;

1.192
date	2013.01.20.00.44.23;	author -;	state -;
branches;
next	1.191;

1.191
date	2013.01.20.00.43.51;	author -;	state -;
branches;
next	1.190;

1.190
date	2013.01.20.00.37.22;	author -;	state -;
branches;
next	1.189;

1.189
date	2013.01.20.00.35.28;	author -;	state -;
branches;
next	1.188;

1.188
date	2013.01.20.00.35.12;	author -;	state -;
branches;
next	1.187;

1.187
date	2013.01.20.00.34.47;	author -;	state -;
branches;
next	1.186;

1.186
date	2013.01.20.00.25.42;	author -;	state -;
branches;
next	1.185;

1.185
date	2013.01.20.00.16.45;	author -;	state -;
branches;
next	1.184;

1.184
date	2013.01.20.00.15.55;	author -;	state -;
branches;
next	1.183;

1.183
date	2013.01.20.00.06.59;	author -;	state -;
branches;
next	1.182;

1.182
date	2013.01.20.00.04.53;	author -;	state -;
branches;
next	1.181;

1.181
date	2013.01.20.00.04.30;	author -;	state -;
branches;
next	1.180;

1.180
date	2013.01.19.23.43.35;	author -;	state -;
branches;
next	1.179;

1.179
date	2013.01.19.23.21.56;	author -;	state -;
branches;
next	1.178;

1.178
date	2013.01.19.23.21.36;	author -;	state -;
branches;
next	1.177;

1.177
date	2013.01.19.23.13.21;	author -;	state -;
branches;
next	1.176;

1.176
date	2013.01.19.23.10.13;	author -;	state -;
branches;
next	1.175;

1.175
date	2013.01.19.23.06.58;	author -;	state -;
branches;
next	1.174;

1.174
date	2013.01.19.23.05.29;	author -;	state -;
branches;
next	1.173;

1.173
date	2013.01.19.23.04.26;	author -;	state -;
branches;
next	1.172;

1.172
date	2013.01.19.23.03.58;	author -;	state -;
branches;
next	1.171;

1.171
date	2013.01.19.23.03.36;	author -;	state -;
branches;
next	1.170;

1.170
date	2013.01.19.22.52.04;	author -;	state -;
branches;
next	1.169;

1.169
date	2013.01.19.22.49.03;	author -;	state -;
branches;
next	1.168;

1.168
date	2013.01.19.22.44.33;	author -;	state -;
branches;
next	1.167;

1.167
date	2013.01.19.22.43.39;	author -;	state -;
branches;
next	1.166;

1.166
date	2013.01.19.22.43.22;	author -;	state -;
branches;
next	1.165;

1.165
date	2013.01.19.22.42.04;	author -;	state -;
branches;
next	1.164;

1.164
date	2013.01.19.22.41.48;	author -;	state -;
branches;
next	1.163;

1.163
date	2013.01.19.22.24.23;	author -;	state -;
branches;
next	1.162;

1.162
date	2013.01.19.22.23.47;	author -;	state -;
branches;
next	1.161;

1.161
date	2013.01.19.22.17.21;	author -;	state -;
branches;
next	1.160;

1.160
date	2013.01.19.22.16.42;	author -;	state -;
branches;
next	1.159;

1.159
date	2013.01.19.22.11.24;	author -;	state -;
branches;
next	1.158;

1.158
date	2013.01.19.22.09.49;	author -;	state -;
branches;
next	1.157;

1.157
date	2013.01.19.22.03.41;	author -;	state -;
branches;
next	1.156;

1.156
date	2013.01.19.22.01.45;	author -;	state -;
branches;
next	1.155;

1.155
date	2013.01.19.22.00.20;	author -;	state -;
branches;
next	1.154;

1.154
date	2013.01.19.21.58.28;	author -;	state -;
branches;
next	1.153;

1.153
date	2013.01.19.21.56.31;	author -;	state -;
branches;
next	1.152;

1.152
date	2013.01.19.21.55.22;	author -;	state -;
branches;
next	1.151;

1.151
date	2013.01.19.21.54.20;	author -;	state -;
branches;
next	1.150;

1.150
date	2013.01.19.21.53.21;	author -;	state -;
branches;
next	1.149;

1.149
date	2013.01.19.21.47.29;	author -;	state -;
branches;
next	1.148;

1.148
date	2013.01.19.21.42.20;	author -;	state -;
branches;
next	1.147;

1.147
date	2013.01.19.21.39.07;	author -;	state -;
branches;
next	1.146;

1.146
date	2013.01.19.21.36.03;	author -;	state -;
branches;
next	1.145;

1.145
date	2013.01.19.21.33.46;	author -;	state -;
branches;
next	1.144;

1.144
date	2013.01.19.21.22.15;	author -;	state -;
branches;
next	1.143;

1.143
date	2013.01.19.21.11.23;	author -;	state -;
branches;
next	1.142;

1.142
date	2013.01.19.21.10.36;	author -;	state -;
branches;
next	1.141;

1.141
date	2013.01.19.21.10.01;	author -;	state -;
branches;
next	1.140;

1.140
date	2013.01.19.21.09.31;	author -;	state -;
branches;
next	1.139;

1.139
date	2013.01.19.21.02.01;	author -;	state -;
branches;
next	1.138;

1.138
date	2013.01.19.21.00.21;	author -;	state -;
branches;
next	1.137;

1.137
date	2013.01.19.20.59.34;	author -;	state -;
branches;
next	1.136;

1.136
date	2013.01.19.20.59.19;	author -;	state -;
branches;
next	1.135;

1.135
date	2013.01.19.20.58.49;	author -;	state -;
branches;
next	1.134;

1.134
date	2013.01.19.20.57.10;	author -;	state -;
branches;
next	1.133;

1.133
date	2013.01.19.20.51.07;	author -;	state -;
branches;
next	1.132;

1.132
date	2013.01.19.20.47.56;	author -;	state -;
branches;
next	1.131;

1.131
date	2013.01.19.20.41.32;	author -;	state -;
branches;
next	1.130;

1.130
date	2013.01.19.20.41.05;	author -;	state -;
branches;
next	1.129;

1.129
date	2013.01.18.23.13.42;	author -;	state -;
branches;
next	1.128;

1.128
date	2013.01.18.23.12.15;	author -;	state -;
branches;
next	1.127;

1.127
date	2013.01.18.22.48.14;	author -;	state -;
branches;
next	1.126;

1.126
date	2013.01.18.22.47.04;	author -;	state -;
branches;
next	1.125;

1.125
date	2013.01.18.21.00.01;	author -;	state -;
branches;
next	1.124;

1.124
date	2013.01.18.20.59.35;	author -;	state -;
branches;
next	1.123;

1.123
date	2013.01.18.20.59.02;	author -;	state -;
branches;
next	1.122;

1.122
date	2013.01.18.20.58.31;	author -;	state -;
branches;
next	1.121;

1.121
date	2013.01.18.20.37.02;	author -;	state -;
branches;
next	1.120;

1.120
date	2013.01.18.20.35.45;	author -;	state -;
branches;
next	1.119;

1.119
date	2013.01.18.20.34.15;	author -;	state -;
branches;
next	1.118;

1.118
date	2013.01.18.20.33.36;	author -;	state -;
branches;
next	1.117;

1.117
date	2013.01.18.20.30.57;	author -;	state -;
branches;
next	1.116;

1.116
date	2013.01.18.20.29.10;	author -;	state -;
branches;
next	1.115;

1.115
date	2013.01.18.20.19.08;	author -;	state -;
branches;
next	1.114;

1.114
date	2013.01.18.19.56.31;	author -;	state -;
branches;
next	1.113;

1.113
date	2013.01.18.19.39.28;	author -;	state -;
branches;
next	1.112;

1.112
date	2013.01.18.19.10.46;	author -;	state -;
branches;
next	1.111;

1.111
date	2013.01.18.19.07.35;	author -;	state -;
branches;
next	1.110;

1.110
date	2013.01.18.19.05.37;	author -;	state -;
branches;
next	1.109;

1.109
date	2013.01.18.18.59.28;	author -;	state -;
branches;
next	1.108;

1.108
date	2013.01.18.18.55.42;	author -;	state -;
branches;
next	1.107;

1.107
date	2013.01.18.18.55.03;	author -;	state -;
branches;
next	1.106;

1.106
date	2013.01.18.18.44.01;	author -;	state -;
branches;
next	1.105;

1.105
date	2013.01.18.18.43.19;	author -;	state -;
branches;
next	1.104;

1.104
date	2013.01.18.18.40.20;	author -;	state -;
branches;
next	1.103;

1.103
date	2013.01.18.18.39.47;	author -;	state -;
branches;
next	1.102;

1.102
date	2013.01.18.18.39.20;	author -;	state -;
branches;
next	1.101;

1.101
date	2013.01.18.18.38.47;	author -;	state -;
branches;
next	1.100;

1.100
date	2013.01.18.18.33.00;	author -;	state -;
branches;
next	1.99;

1.99
date	2013.01.18.18.31.13;	author -;	state -;
branches;
next	1.98;

1.98
date	2013.01.18.18.30.17;	author -;	state -;
branches;
next	1.97;

1.97
date	2013.01.18.18.25.55;	author -;	state -;
branches;
next	1.96;

1.96
date	2013.01.18.18.25.30;	author -;	state -;
branches;
next	1.95;

1.95
date	2013.01.18.18.24.58;	author -;	state -;
branches;
next	1.94;

1.94
date	2013.01.18.18.14.29;	author -;	state -;
branches;
next	1.93;

1.93
date	2013.01.18.02.39.13;	author -;	state -;
branches;
next	1.92;

1.92
date	2013.01.18.02.31.32;	author -;	state -;
branches;
next	1.91;

1.91
date	2013.01.18.02.30.42;	author -;	state -;
branches;
next	1.90;

1.90
date	2013.01.18.02.09.26;	author -;	state -;
branches;
next	1.89;

1.89
date	2013.01.18.02.06.33;	author -;	state -;
branches;
next	1.88;

1.88
date	2013.01.18.02.05.33;	author -;	state -;
branches;
next	1.87;

1.87
date	2013.01.18.02.05.12;	author -;	state -;
branches;
next	1.86;

1.86
date	2013.01.18.02.04.41;	author -;	state -;
branches;
next	1.85;

1.85
date	2013.01.18.02.02.44;	author -;	state -;
branches;
next	1.84;

1.84
date	2013.01.18.02.01.49;	author -;	state -;
branches;
next	1.83;

1.83
date	2013.01.18.02.00.49;	author -;	state -;
branches;
next	1.82;

1.82
date	2013.01.18.01.47.40;	author -;	state -;
branches;
next	1.81;

1.81
date	2013.01.18.01.44.05;	author -;	state -;
branches;
next	1.80;

1.80
date	2013.01.18.01.43.35;	author -;	state -;
branches;
next	1.79;

1.79
date	2013.01.18.01.42.03;	author -;	state -;
branches;
next	1.78;

1.78
date	2013.01.18.01.29.46;	author -;	state -;
branches;
next	1.77;

1.77
date	2013.01.18.01.06.28;	author -;	state -;
branches;
next	1.76;

1.76
date	2013.01.18.00.22.33;	author -;	state -;
branches;
next	1.75;

1.75
date	2013.01.18.00.21.34;	author -;	state -;
branches;
next	1.74;

1.74
date	2013.01.18.00.18.38;	author -;	state -;
branches;
next	1.73;

1.73
date	2013.01.18.00.18.15;	author -;	state -;
branches;
next	1.72;

1.72
date	2013.01.18.00.12.09;	author -;	state -;
branches;
next	1.71;

1.71
date	2013.01.18.00.11.35;	author -;	state -;
branches;
next	1.70;

1.70
date	2013.01.18.00.11.13;	author -;	state -;
branches;
next	1.69;

1.69
date	2013.01.18.00.09.17;	author -;	state -;
branches;
next	1.68;

1.68
date	2013.01.17.23.59.50;	author -;	state -;
branches;
next	1.67;

1.67
date	2013.01.17.23.58.06;	author -;	state -;
branches;
next	1.66;

1.66
date	2013.01.17.23.53.38;	author -;	state -;
branches;
next	1.65;

1.65
date	2013.01.17.23.53.01;	author -;	state -;
branches;
next	1.64;

1.64
date	2013.01.17.23.52.17;	author -;	state -;
branches;
next	1.63;

1.63
date	2013.01.17.23.49.19;	author -;	state -;
branches;
next	1.62;

1.62
date	2013.01.17.23.48.36;	author -;	state -;
branches;
next	1.61;

1.61
date	2013.01.17.23.47.54;	author -;	state -;
branches;
next	1.60;

1.60
date	2013.01.17.23.46.25;	author -;	state -;
branches;
next	1.59;

1.59
date	2013.01.17.23.42.30;	author -;	state -;
branches;
next	1.58;

1.58
date	2013.01.17.23.41.41;	author -;	state -;
branches;
next	1.57;

1.57
date	2013.01.17.20.22.10;	author -;	state -;
branches;
next	1.56;

1.56
date	2013.01.17.04.01.33;	author -;	state -;
branches;
next	1.55;

1.55
date	2013.01.17.03.58.55;	author -;	state -;
branches;
next	1.54;

1.54
date	2013.01.17.03.33.10;	author -;	state -;
branches;
next	1.53;

1.53
date	2013.01.17.03.27.16;	author -;	state -;
branches;
next	1.52;

1.52
date	2013.01.17.03.26.38;	author -;	state -;
branches;
next	1.51;

1.51
date	2013.01.17.03.23.12;	author -;	state -;
branches;
next	1.50;

1.50
date	2013.01.17.03.22.13;	author -;	state -;
branches;
next	1.49;

1.49
date	2013.01.17.03.20.05;	author -;	state -;
branches;
next	1.48;

1.48
date	2013.01.17.03.18.44;	author -;	state -;
branches;
next	1.47;

1.47
date	2013.01.17.03.18.16;	author -;	state -;
branches;
next	1.46;

1.46
date	2013.01.17.03.17.36;	author -;	state -;
branches;
next	1.45;

1.45
date	2013.01.17.03.14.19;	author -;	state -;
branches;
next	1.44;

1.44
date	2013.01.17.03.13.27;	author -;	state -;
branches;
next	1.43;

1.43
date	2013.01.17.03.12.33;	author -;	state -;
branches;
next	1.42;

1.42
date	2013.01.17.03.11.45;	author -;	state -;
branches;
next	1.41;

1.41
date	2013.01.17.03.06.09;	author -;	state -;
branches;
next	1.40;

1.40
date	2013.01.17.02.18.06;	author -;	state -;
branches;
next	1.39;

1.39
date	2013.01.17.02.07.33;	author -;	state -;
branches;
next	1.38;

1.38
date	2013.01.17.02.07.15;	author -;	state -;
branches;
next	1.37;

1.37
date	2013.01.17.02.06.14;	author -;	state -;
branches;
next	1.36;

1.36
date	2013.01.17.02.04.53;	author -;	state -;
branches;
next	1.35;

1.35
date	2013.01.17.02.03.26;	author -;	state -;
branches;
next	1.34;

1.34
date	2013.01.17.01.59.49;	author -;	state -;
branches;
next	1.33;

1.33
date	2013.01.17.01.56.29;	author -;	state -;
branches;
next	1.32;

1.32
date	2013.01.17.01.51.28;	author -;	state -;
branches;
next	1.31;

1.31
date	2013.01.17.01.49.59;	author -;	state -;
branches;
next	1.30;

1.30
date	2013.01.17.01.27.56;	author -;	state -;
branches;
next	1.29;

1.29
date	2013.01.17.01.27.28;	author -;	state -;
branches;
next	1.28;

1.28
date	2013.01.17.01.27.00;	author -;	state -;
branches;
next	1.27;

1.27
date	2013.01.17.01.25.11;	author -;	state -;
branches;
next	1.26;

1.26
date	2013.01.17.01.24.35;	author -;	state -;
branches;
next	1.25;

1.25
date	2013.01.16.22.33.24;	author -;	state -;
branches;
next	1.24;

1.24
date	2013.01.16.22.32.05;	author -;	state -;
branches;
next	1.23;

1.23
date	2013.01.16.22.29.24;	author -;	state -;
branches;
next	1.22;

1.22
date	2013.01.16.22.28.06;	author -;	state -;
branches;
next	1.21;

1.21
date	2013.01.16.22.24.44;	author -;	state -;
branches;
next	1.20;

1.20
date	2013.01.16.21.54.25;	author -;	state -;
branches;
next	1.19;

1.19
date	2013.01.16.21.53.52;	author -;	state -;
branches;
next	1.18;

1.18
date	2013.01.16.18.17.47;	author -;	state -;
branches;
next	1.17;

1.17
date	2013.01.16.18.15.49;	author -;	state -;
branches;
next	1.16;

1.16
date	2013.01.16.18.06.30;	author -;	state -;
branches;
next	1.15;

1.15
date	2013.01.16.18.05.08;	author -;	state -;
branches;
next	1.14;

1.14
date	2013.01.16.17.51.51;	author -;	state -;
branches;
next	1.13;

1.13
date	2013.01.16.17.50.03;	author -;	state -;
branches;
next	1.12;

1.12
date	2013.01.15.22.58.08;	author -;	state -;
branches;
next	1.11;

1.11
date	2013.01.15.22.51.37;	author -;	state -;
branches;
next	1.10;

1.10
date	2013.01.15.22.49.42;	author -;	state -;
branches;
next	1.9;

1.9
date	2013.01.15.22.47.21;	author -;	state -;
branches;
next	1.8;

1.8
date	2013.01.15.03.33.47;	author -;	state -;
branches;
next	1.7;

1.7
date	2013.01.15.03.24.33;	author -;	state -;
branches;
next	1.6;

1.6
date	2013.01.15.03.23.54;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.01.15.03.23.03;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.01.15.03.15.06;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.01.15.03.12.46;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.01.15.03.11.16;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.01.10.01.34.19;	author -;	state -;
branches;
next	;


desc
@@


1.255
log
@-
@
text
@// $Id: inode.cpp,v 1.230 2013-01-20 14:35:16-08 - - $

#include <cassert>
#include <iostream>

using namespace std;

#include "trace.h"
#include "inode.h"

int inode::next_inode_nr = 1;

inode::inode(inode_t init_type):
   inode_nr (next_inode_nr++), type (init_type)
{
   switch (type) {
      case DIR_INODE:
           contents.dirents = new directory();
           break;
      case FILE_INODE:
           contents.data = new wordvec();
           break;
   }
   TRACE ('i', "inode " << inode_nr << ", type = " << type);
}

//
// copy ctor -
//    Make a copy of a given inode.  This should not be used in
//    your program if you can avoid it, since it is expensive.
//    Here, we can leverage operator=.
//
inode::inode (const inode &that) {
   *this = that;
}

//
// operator= -
//    Assignment operator.  Copy an inode.  Make a copy of a
//    given inode.  This should not be used in your program if
//    you can avoid it, since it is expensive.
//
inode &inode::operator= (const inode &that) {
   if (this != &that) {
      inode_nr = that.inode_nr;
      type = that.type;
      contents = that.contents;
   }
   TRACE ('i', "inode " << inode_nr << ", type = " << type);
   return *this;
}

int inode::get_inode_nr() {
   TRACE ('i', "inode = " << inode_nr);
   return inode_nr;
}

int inode::size() {
   int size = 0;
   int hold;
   TRACE ('i', "size = " << size);
   switch(type) {
      case DIR_INODE:
         size = contents.dirents->size();
         break;
      case FILE_INODE:
         if(contents.data->size() == 0){
            size = 0;
         } else {
            hold = contents.data->size();
            for(int i = 0; i<hold; i++){
               size += contents.data->at(i).size();
            }
            size = size + hold - 1;
         }
         break;
   }
   return size;
}

const wordvec &inode::readfile() const {
   TRACE ('i', *contents.data);
   assert (type == FILE_INODE);
   return *contents.data;
}

/*changes the contents of the file*/
void inode::writefile (const wordvec &words) {
   TRACE ('i', words);
   assert (type == FILE_INODE);
   while( !contents.data->empty()){
     contents.data->pop_back();
   }
   for(unsigned i = 2; i<words.size(); ++i){
     contents.data->push_back(words[i]);
   }
}

//removes the files or empty directory from the tree
void inode::remove (const string &filename) {
   TRACE ('i', filename);
   assert (type == DIR_INODE);
   auto it = contents.dirents->find(filename);
   contents.dirents->erase(it);
}
/*
  inode_print_ls: handles the actual printing of the 
                  inode
*/
void inode::inode_print_ls(){
   auto it = contents.dirents->begin();
   for(; it != contents.dirents->end(); ++it){
      cout<<"     "<<it->second->get_inode_nr()<<"        "
      <<it->second->size();
      if( it->second->type == FILE_INODE){
         cout <<" "<< it->first <<endl;
      }else {
         cout<<" "<<it->first <<"/" <<endl;
      }
   }
}

// prints the contents of the file
void inode::print_file(){
   for(unsigned i=0; i< contents.data->size(); ++i){
      cout<< contents.data->at(i) <<" ";
   }
   cout<<endl;
}


inode_state::inode_state(inode &theRoot, inode &theCwd, const string
  &thePrompt): root (&theRoot), cwd (&theCwd), prompt (thePrompt) {
   TRACE ('i', "root = " << (void*) root << ", cwd = " << (void*) cwd
          << ", prompt = " << prompt);
}

// initializes the root directory 
void inode_state::init_state(inode &theRoot){
   (*root->contents.dirents)["."] = &theRoot;
   (*root->contents.dirents)[".."] = &theRoot;
   pwd.push_back("/");
}

/*
  cat_file: does error checking and prints out he 
           specified file 
*/
void inode_state::cat_file(const wordvec &words){
   for(unsigned i =1; i<words.size(); ++i){
      auto it = cwd->contents.dirents->find(words[i]);
      if(it == cwd->contents.dirents->end()){
         throw yshell_exn("no file "+words[i]+" exist");
      } else if ((*it).second->type == FILE_INODE){
         cout << words[i]<<": "<< endl;
         it->second->print_file();      
      } else {
         throw yshell_exn( words[i]+": is directory");
      }
   }
}

/*
  prints the current working directory
*/
void inode_state::print_ls(){
   cout << pwd <<":"<< endl;
   cwd->inode_print_ls();
}

/*
  path_ls: does error checking, and prints out specified path
*/
void inode_state::path_ls(const string &pathname){
   auto it = cwd->contents.dirents->find(pathname);
   cout << pwd << pathname <<":" << endl;
   if( it == cwd->contents.dirents->end()){
      throw yshell_exn("no such file or directory: "+ pathname);
   } else {
      if((*it).second->type == FILE_INODE){
         cout <<  it->first <<endl;
      } else{
         (*it).second->inode_print_ls();
      }
   }
}
// sets the prompt to the new prompt
void inode_state::set_prompt(const string &the_prompt){
   prompt = the_prompt;
}

//returns the prompt
string inode_state::return_prompt(){
   return prompt;
}
//returns a pointer to the current working directory 
inode* inode_state::get_cwd(){
   return cwd;
}
/*
  make_file: does error checking and creates a new file inode
*/
void inode_state::make_file(const wordvec &words){
   auto it = cwd->contents.dirents->find(words[1]);
   if( it == cwd->contents.dirents->end()){
      inode *file = new inode(FILE_INODE);
      for(unsigned i = 2; i < words.size(); ++i){
         file->contents.data->push_back(words[i]);
      }
      (*cwd->contents.dirents)[words[1]] = file;
   } else{
      it->second->writefile(words);
   }
}

/*
  make_dir: does error checking and creates a new directory inode
*/
void inode_state::make_dir(const wordvec &words){
   auto it = cwd->contents.dirents->find(words[1]);
   if( it != cwd->contents.dirents->end()){
      throw yshell_exn("file or directory: "+ words[1]
      +": already exists");
   } else { //initializes inode
      inode *dir = new inode(DIR_INODE);
      (*cwd->contents.dirents)[words[1]]=dir;
      (*dir->contents.dirents)["."] = dir;
      (*dir->contents.dirents)[".."] = cwd;
   }
}

/*
prints the current working directories 
*/
void inode_state::print_pwd(){
   for(unsigned i =0; i< pwd.size(); i++){
      cout << pwd[i];
   }
   cout << endl;
}
/*
 cd_root: cd to the root directory 
*/
void inode_state::cd_root(){
   cwd = root;
   while(!pwd.empty()){
      pwd.pop_back();
   }
   pwd.push_back("/");
}

/*
  cd_set_cwd: checks for error and changes directory recursively 
*/
void inode_state::cd_set_cwd(inode_state &state,const wordvec &words){
   if(words.size() != 0){
      wordvec new_word;
      auto it = state.cwd->contents.dirents->find(words[0]);
      if(it == state.cwd->contents.dirents->end()){
         throw yshell_exn("no directory named:" + words[0]); 
      } else if( it->second->type == FILE_INODE){
         throw yshell_exn(words[0] +": not a directory");
      } else if (words[0] == ".."){ //cd to previous/parent directory  
         if( state.root == state.cwd){
            state.cwd = it->second;
            for(unsigned i =1; i<words.size(); ++i){
               new_word.push_back(words[i]);
            }
            state.cd_set_cwd(state,new_word);
         } else {
            state.cwd = it->second;
            state.pwd.pop_back();
            for(unsigned i =1; i<words.size(); ++i){
               new_word.push_back(words[i]);
            }
            state.cd_set_cwd(state,new_word);
         }
      } else if(words[0]=="."){ // cd to current inode
         for(unsigned i=1; i<words.size(); i++){
            new_word.push_back(words[i]);
         } 
         state.cd_set_cwd(state,new_word);
      } else { // cd to any other directory
         state.pwd.push_back(words[0]+"/");
         state.cwd = it->second;
         for(unsigned i = 1; i<words.size(); ++i){
            new_word.push_back(words[i]);
         }
         state.cd_set_cwd(state,new_word);
      }
   }
}

/*
 remove_inode: does error checking, and removes the inode
               from tree
*/
void inode_state::remove_inode(const wordvec &words){
    auto it = cwd->contents.dirents->find(words[1]);
    if( it == cwd->contents.dirents->end()){
       throw yshell_exn("no file or directory: "+words[1]);
    } else if( it->second->type == DIR_INODE){
       if(it->second->size() > 2){
          throw yshell_exn("cannot remove nonempty directory");
       } else {
          cwd->remove(words[1]);
       }
    } else {
       cwd->remove(words[1]);
    }
}

ostream &operator<< (ostream &out, const inode_state &state) {
   out << "inode_state: root = " << state.root
       << ", cwd = " << state.cwd;
   return out;
}


@


1.254
log
@-
@
text
@d87 1
d99 1
d106 4
a109 1

d123 1
d138 1
d145 4
d163 3
d171 3
d187 1
a187 2


d192 1
d196 1
a196 1

d200 3
a202 1

d216 3
d224 1
a224 1
   } else {
d232 3
d241 3
a243 1

d252 3
d263 1
a263 1
      } else if (words[0] == ".."){ 
d278 1
a278 1
      } else if(words[0]=="."){
d283 1
a283 1
      } else {
d294 4
@


1.253
log
@-
@
text
@d159 1
a159 1
   cout << pwd <<": " << pathname <<":" << endl;
@


1.252
log
@-
@
text
@d152 1
a152 1
void inode_state::print_ls){
@


1.251
log
@-
@
text
@d152 2
a153 2
void inode_state::print_ls(){
   cout << pwd <<":" << endl;
d159 1
a159 1
   cout << pwd <<":" << endl;
@


1.250
log
@-
@
text
@d144 1
a144 1
         cout << words[i]<<": "<< end;
@


1.249
log
@-
@
text
@d144 1
@


1.248
log
@-
@
text
@d139 1
a139 1
   for(unsigned i =1; i<words.size() ++i){
@


1.247
log
@-
@
text
@d139 9
a147 7
   auto it = cwd->contents.dirents->find(words[1]);
   if(it == cwd->contents.dirents->end()){
      throw yshell_exn("no file "+words[1]+" exist");
   } else if ((*it).second->type == FILE_INODE){
      it->second->print_file();      
   } else {
      throw yshell_exn( words[1]+": is directory");
d201 1
a201 5
   }/*
   if( it == cwd->contents.dirents->end()){
      inode *dir = new inode(DIR_INODE);
      (*cwd->contents.dirents)[words[1]+"/"] = dir; 
   } */else {
a232 1
         //state.cwd = it->second;
@


1.246
log
@-
@
text
@d108 2
a109 1
      cout<<"     "<<it->second->get_inode_nr()<<"        "<<it->second->size();
@


1.245
log
@-
@
text
@d108 1
a108 1
      cout<<it->second->get_inode_nr()<<"        "<<it->second->size();
@


1.244
log
@-
@
text
@d101 2
d265 15
@


1.243
log
@-
@
text
@d210 1
a210 1
      cout << pwd.at(i);
@


1.242
log
@-
@
text
@d232 1
a232 1
         state.cwd = it->second;
d234 1
d240 1
a240 1
            //state.cwd = it->second;
@


1.241
log
@-
@
text
@d239 1
a239 1
            state.cwd = it->second;
@


1.240
log
@-
@
text
@d225 1
d232 19
a250 2
         //state
         cout <<"in .."<<endl;
d252 1
a252 1
         state.pwd.push_back(words[0]);
a253 1
         wordvec new_word;
d255 1
a255 1
            new_word.push_back(words[1]);
@


1.239
log
@-
@
text
@d231 1
d235 1
a235 1
         cwd = it->second;
@


1.238
log
@-
@
text
@d230 2
@


1.237
log
@-
@
text
@a233 1
         //words.erase(words.begin());
a237 1
         cout <<"in"<<endl;
a238 1
      cout << words << endl;
@


1.236
log
@-
@
text
@d238 1
a238 1
         state.cd_set_cwd(state,new_words);
@


1.235
log
@-
@
text
@d233 6
a238 2
         words.erase(words.begin());
         state.cd_set_cwd(state,words);
@


1.234
log
@-
@
text
@d225 1
a225 1
      auto it = state.cwd->contents.dirents->find(words[1]);
d227 1
a227 1
         throw yshell_exn("no directory named:" + words[1]); 
d229 1
a229 1
         throw yshell_exn(words[1] +": not a directory");
d231 1
d233 1
a233 1
         words.erase(words.begin()+0);
@


1.233
log
@-
@
text
@d232 1
a232 1
         words.erase(0);
@


1.232
log
@-
@
text
@d232 1
a232 1
         words.erase(words.begin());
@


1.231
log
@-
@
text
@d223 1
a223 1
void inode_state::cd_set_cwd(inode *the_cwd, const wordvec &words){
d225 2
a226 2
      auto it = the_cwd->contents.dirents->find(words[1]);
      if(it == the_cwd->contents.dirents->end()){
d231 3
@


1.230
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.229 2013-01-20 14:34:21-08 - - $
d223 1
a223 1
void inode_state::cd_set_cwd(const wordvec &words){
d225 2
a226 2
      auto it = cwd->contents.dirents->find(words[1]);
      if(it == cwd->contents.dirents->end()){
@


1.229
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.228 2013-01-20 14:33:57-08 - - $
d194 2
a195 1
      throw yshell_exn("file or directory "+ words[1]+" already exists");
@


1.228
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.227 2013-01-20 14:33:33-08 - - $
d226 1
a226 1
         throw yshell_exn("no directory named:" + words[1]; 
@


1.227
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.226 2013-01-20 14:16:49-08 - - $
d224 1
a224 1
      auto it = cwd->contents.dirents->fine(words[1]);
@


1.226
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.225 2013-01-20 14:11:06-08 - - $
d194 1
a194 1
      throw yshell_exn("file or direcoty "+ words[1]+" already exists");
d223 11
a233 1
   cout << words << endl;
@


1.225
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.224 2013-01-20 13:53:26-08 - - $
d223 1
a223 1

@


1.224
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.223 2013-01-20 13:52:01-08 - - $
d214 11
@


1.223
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.222 2013-01-20 13:34:50-08 - - $
d93 1
a93 1
   for(int i = 2; i<words.size(); ++i){
d116 1
a116 1
   for(int i=0; i< contents.data->size(); ++i){
d182 1
a182 1
      for(int i = 2; i < words.size(); ++i){
d208 1
a208 1
   for( int i =0; i< pwd.size(); i++){
@


1.222
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.221 2013-01-20 13:32:07-08 - - $
a121 6
/*
inode::inode &mkfile(const string &filename){
    inode file(FILE_INODE);
    (contents.dirents)[filename] = &file;
    return &file;
}*/
a184 1
      cout << "file size is " << file->size() <<endl;
@


1.221
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.220 2013-01-20 13:31:18-08 - - $
d214 7
@


1.220
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.219 2013-01-20 13:29:11-08 - - $
d153 1
a153 1
   cout << pwd << endl;
d159 1
a159 1
   cout << pwd << endl;
@


1.219
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.218 2013-01-20 13:28:02-08 - - $
a104 1
   cout << pwd << endl;
d153 1
d159 1
a163 1
         cout << "path_ls"<<endl;
@


1.218
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.217 2013-01-20 13:25:14-08 - - $
d105 1
@


1.217
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.215 2013-01-20 13:14:39-08 - - $
d138 1
@


1.216
log
@-
@
text
@d110 1
a110 1
         cout<<" "<<it->first<<"/" <<endl;
@


1.215
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.214 2013-01-20 13:11:58-08 - - $
d110 1
a110 1
         cout<<" "<<it-first<<"/" <<endl;
@


1.214
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.213 2013-01-20 13:04:32-08 - - $
d106 6
a111 2
      cout<<it->second->get_inode_nr()<<"        "<<it->second->size()
      <<" "<< it->first <<endl;
@


1.213
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.212 2013-01-20 13:02:55-08 - - $
d202 3
a204 1
      (*cwd->contents.dirents)[words[1]+"/"]=dir;
@


1.212
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.211 2013-01-20 12:58:24-08 - - $
d140 1
a140 1
   } else if ((*it).second->contents.data){
@


1.211
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.210 2013-01-20 12:58:02-08 - - $
d156 1
a156 1
      if((*it).second->contents.data->size() >= 0){
@


1.210
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.209 2013-01-20 12:57:01-08 - - $
d157 1
a157 1
         cout << "path_ls");
@


1.209
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.208 2013-01-20 12:51:00-08 - - $
d157 1
@


1.208
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.207 2013-01-20 12:43:28-08 - - $
d156 1
a156 1
      if((*it).second->contents.data){
@


1.207
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.206 2013-01-20 12:41:38-08 - - $
d193 3
d199 3
a201 2
   } else {
      throw yshell_exn("file or directory "+words[1]+" already exist");
@


1.206
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.205 2013-01-20 12:40:27-08 - - $
a141 6
/*
      for(int i=0; i < it->second->contents.data->size()-1; ++i){
         cout <<" in loop"<<endl;
         cout << it->second->contents.data[i] <<" ";
      }*/
      cout << endl;
a148 5
   /*auto it = cwd->contents.dirents->begin();
   for(; it != cwd->contents.dirents->end(); ++it){
      cout << cwd->get_inode_nr() <<"     "<< it->second->size() << " "
      << it->first <<endl;
   }*/
@


1.205
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.204 2013-01-20 12:37:31-08 - - $
d104 1
a104 1
   vector<string>::iterator it = contents.dirents->begin();
@


1.204
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.203 2013-01-20 12:36:59-08 - - $
d112 2
a113 3
   auto it = contents.data->begin();
   for(; it < contents.data->end(); ++it){
      cout<< it->first <<" ";
@


1.203
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.202 2013-01-20 12:36:13-08 - - $
d104 1
a104 1
   vector<string>::it = contents.dirents->begin();
@


1.202
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.201 2013-01-20 12:35:47-08 - - $
d104 1
a104 1
   auto it = contents.dirents->begin();
@


1.201
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.200 2013-01-20 12:35:06-08 - - $
d113 1
a113 1
   for(; it < contents.data->end(); i++){
@


1.200
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.199 2013-01-20 12:34:39-08 - - $
d113 2
a114 2
   for(int i=0; i < contents.data->size(); i++){
      cout<< contents.data[i] <<" ";
@


1.199
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.198 2013-01-20 12:30:07-08 - - $
d112 1
a112 1
   auto iterator it = contents.data->begin();
@


1.198
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.197 2013-01-20 12:29:30-08 - - $
d112 1
@


1.197
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.196 2013-01-20 12:16:52-08 - - $
d113 1
a113 1
      cout<< contetns.data[i] <<" ";
@


1.196
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.195 2013-01-20 12:14:20-08 - - $
d111 7
d141 2
d146 1
a146 1
      }
@


1.195
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.194 2013-01-19 16:48:49-08 - - $
d134 1
a134 1
      for(int i=0; i< it->second->contents.data->size(); ++i){
@


1.194
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.193 2013-01-19 16:47:35-08 - - $
a130 1
   cout <<"in cat"<<endl;
a133 1
      cout<<"in else if"<<endl;
d135 1
@


1.193
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.192 2013-01-19 16:44:23-08 - - $
d135 1
@


1.192
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.191 2013-01-19 16:43:51-08 - - $
d130 2
a131 1
   auto it = cwd->contents.dirents->find(words[2]);
d133 1
a133 1
      throw yshell_exn("no file "+words[2]+" exist");
d140 1
a140 1
      throw yshell_exn( words[2]+": is directory");
@


1.191
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.190 2013-01-19 16:37:22-08 - - $
d135 1
a135 1
         cout << it->second->contents.data[i] <<" "
@


1.190
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.189 2013-01-19 16:35:28-08 - - $
d133 7
@


1.189
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.188 2013-01-19 16:35:12-08 - - $
d132 1
a132 1
      throw yshell_exn("no file "+words[2]s+" exist");
@


1.188
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.187 2013-01-19 16:34:47-08 - - $
d132 1
a132 1
      throw yshell_exn("no file "+word[2]s+" exist");
@


1.187
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.186 2013-01-19 16:25:42-08 - - $
d131 2
a132 2
   if(it == cwed->contents.dirents->end()){
      throw yshell_exn("no file "+word[2]+" exist");
@


1.186
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.185 2013-01-19 16:16:45-08 - - $
d129 6
@


1.185
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.184 2013-01-19 16:15:55-08 - - $
d90 6
d172 1
a172 1
      cout << "file size is" << file->size() <<endl;
a174 1
      cout<<"int else"<<endl;
@


1.184
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.183 2013-01-19 16:06:59-08 - - $
d169 1
a169 1
      cout<<"int else"<endl;
@


1.183
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.182 2013-01-19 16:04:53-08 - - $
d169 1
@


1.182
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.181 2013-01-19 16:04:30-08 - - $
d177 1
a177 1
      (*cwd->contents.dirents)[words[1]] = dir; 
@


1.181
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.180 2013-01-19 15:43:35-08 - - $
d174 1
a174 1
   auto it = cwd->contents.dirents->find(word[1]);
d177 1
a177 1
      (*cwd->contents.dirents)[word[1]] = dir; 
@


1.180
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.179 2013-01-19 15:21:56-08 - - $
d173 10
@


1.179
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.178 2013-01-19 15:21:36-08 - - $
d160 10
a169 3
   inode *file = new inode(FILE_INODE);
   for(int i = 2; i < words.size(); ++i){
      file->contents.data->push_back(words[i]);
a170 2
   cout << "file size is" << file->size() <<endl;
   (*cwd->contents.dirents)[words[1]] = file;
@


1.178
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.177 2013-01-19 15:13:21-08 - - $
d67 1
a67 1
         if(contens.data->size() == 0){
@


1.177
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.176 2013-01-19 15:10:13-08 - - $
d67 8
a74 3
         hold = contents.data->size();
         for(int i = 0; i<hold; i++){
            size += contents.data->at(i).size();
a75 1
         size = size + hold - 1;
@


1.176
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.175 2013-01-19 15:06:58-08 - - $
d96 1
a96 1
      cout<<get_inode_nr()<<"        "<<it->second->size()
@


1.175
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.174 2013-01-19 15:05:29-08 - - $
d134 4
a137 2
       if( (*it).second->contents.data){
           cout << "in if"<<endl;
a138 2
     cout << (*it).first << endl;
     throw yshell_exn("no");
@


1.174
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.173 2013-01-19 15:04:26-08 - - $
d134 1
a134 1
       if( (*it).second->contents.data == cwd->contents.data){
@


1.173
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.172 2013-01-19 15:03:58-08 - - $
d96 2
a97 2
      cout<<get_inode_nr()<<"       "<<it->second->size()<<" "<< it->first 
      <<endl;
@


1.172
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.171 2013-01-19 15:03:36-08 - - $
d96 1
a96 1
      cout << get_inode_nr() <<"       "<< it->second->size() << " "<< it->first 
@


1.171
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.170 2013-01-19 14:52:04-08 - - $
d126 1
a126 1
   }*
@


1.170
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.169 2013-01-19 14:49:03-08 - - $
d92 1
a92 1
/*
d96 1
a96 1
      cout << get_inode_nr() <<"       "<< size() << " "<< it->first 
d99 1
a99 1
}*/
d121 2
a122 1
    auto it = cwd->contents.dirents->begin();
d126 1
a126 1
   } 
@


1.169
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.168 2013-01-19 14:44:33-08 - - $
d133 1
a133 1
       if( (*it).second == cwd->contents.data){
@


1.168
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.167 2013-01-19 14:43:39-08 - - $
a120 1
   //cwd->inode_print_ls();  
d133 1
a133 1
      /*  if( (*it).first == cwd->contents.data){
d135 1
a135 1
      }*/
@


1.167
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.166 2013-01-19 14:43:22-08 - - $
d125 1
a125 1
      << it->first << " "<< it->second <<endl;
@


1.166
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.165 2013-01-19 14:42:04-08 - - $
d124 1
a124 1
      cout << cwd->get_inode_nr() <<"       "<< it->second->size() << " "
@


1.165
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.164 2013-01-19 14:41:48-08 - - $
d124 1
a124 1
      cout << cwd->get_inode_nr() <<"       "<< cwd->size() << " "
@


1.164
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.163 2013-01-19 14:24:23-08 - - $
d125 1
a125 1
      << it->first << " "<< it-second <<endl;
@


1.163
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.162 2013-01-19 14:23:47-08 - - $
d125 1
a125 1
      << it->first <<endl;
@


1.162
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.161 2013-01-19 14:17:21-08 - - $
d124 1
a124 1
      cout << cwd->get_inode_nr() <<"       "<< it->size() << " "
@


1.161
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.160 2013-01-19 14:16:42-08 - - $
d124 1
a124 1
      cout << cwd->get_inode_nr() <<"       "<< cwd->size() << " "
@


1.160
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.159 2013-01-19 14:11:24-08 - - $
d124 2
a125 2
      cout << cwd->get_inode_nr() <<"       "<< cwd->size() << " "<< it->first 
      <<endl;
@


1.159
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.158 2013-01-19 14:09:49-08 - - $
d124 1
a124 1
      cout << get_inode_nr() <<"       "<< size() << " "<< it->first 
@


1.158
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.157 2013-01-19 14:03:41-08 - - $
d123 1
a123 1
   for(; it != contents.dirents->end(); ++it){
@


1.157
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.156 2013-01-19 14:01:45-08 - - $
d92 1
a92 1

d99 1
a99 1
}
d121 6
a126 1
   cwd->inode_print_ls();   
@


1.156
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.155 2013-01-19 14:00:20-08 - - $
d101 1
a101 1

d106 1
a106 1
}
d151 1
a151 1
   inode *file = (*cwd).mkfile(words[1]);
d156 1
a156 1
   //(*cwd->contents.dirents)[words[1]] = file;
@


1.155
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.154 2013-01-19 13:58:28-08 - - $
d151 1
a151 1
   inode *file = cwd->mkfile(words[1]);
@


1.154
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.153 2013-01-19 13:56:31-08 - - $
d103 3
a105 3
    inode *file = new inode(FILE_INODE);
    (contents.dirents)[filename] = file;
    return file;
@


1.153
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.152 2013-01-19 13:55:22-08 - - $
d101 1
a101 1
/*
d107 1
a107 1
*/
d151 1
a151 1
   inode *file = new inode(FILE_INODE);
d156 1
a156 1
   (*cwd->contents.dirents)[words[1]] = file;
@


1.152
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.151 2013-01-19 13:54:20-08 - - $
d156 1
a156 1
   (*cwd->contents.dirents).at(words[1]) = file;
@


1.151
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.150 2013-01-19 13:53:21-08 - - $
d156 1
a156 1
   cwd->contents.dirents->at(words[1]) = file;
@


1.150
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.149 2013-01-19 13:47:29-08 - - $
d156 1
a156 1
   (*cwd->contents.dirents->at(words[1])) = file;
@


1.149
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.148 2013-01-19 13:42:20-08 - - $
d156 1
a156 1
   (*cwd->contents.dirents)[words[1]] = file;
@


1.148
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.147 2013-01-19 13:39:07-08 - - $
d156 1
a156 1
   (*cwd->contents.dirents->insert(pair<string,inode*>(words[1],file));
@


1.147
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.146 2013-01-19 13:36:03-08 - - $
d156 1
a156 1
   (*file->contents.dirents)[words[1]] = cwd;
@


1.146
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.145 2013-01-19 13:33:46-08 - - $
d129 1
a129 1
        if( (*it).first == cwd->contents.data){
d131 1
a131 1
      }
d156 1
a156 1
   (*cwd->contents.dirents)[words[1]] = file;
@


1.145
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.144 2013-01-19 13:22:15-08 - - $
d129 4
a132 2
        //if( (*it).first == cwd->contents.data->
     cout << (*it).first <<" "<< it->second << endl;
@


1.144
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.143 2013-01-19 13:11:23-08 - - $
d130 1
a130 1
     cout << (*it).first <<endl;
@


1.143
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.142 2013-01-19 13:10:36-08 - - $
d96 1
a96 1
      cout << get_inode_nr() <<"       "<<(*it)->size() << " "<< it->first 
@


1.142
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.141 2013-01-19 13:10:01-08 - - $
d96 1
a96 1
      cout << get_inode_nr() <<"       "<<(*it).size() << " "<< it->first 
@


1.141
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.140 2013-01-19 13:09:31-08 - - $
d129 1
a129 1
        if( (*it).first == cwd->contents.data->
@


1.140
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.139 2013-01-19 13:02:01-08 - - $
d96 1
a96 1
      cout << get_inode_nr() <<"       "<<(*it)size() << " "<< it->first 
@


1.139
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.138 2013-01-19 13:00:21-08 - - $
d96 1
a96 1
      cout << get_inode_nr() <<"       "<< size() << " "<< it->first 
d129 1
@


1.138
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.137 2013-01-19 12:59:34-08 - - $
d129 1
a129 1
    
@


1.137
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.136 2013-01-19 12:59:19-08 - - $
d129 1
a129 1
     cout << it << endl;
@


1.136
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.135 2013-01-19 12:58:49-08 - - $
d125 1
a125 1
   it = cwd->contents.dirents->find(pathname);
@


1.135
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.134 2013-01-19 12:57:10-08 - - $
d125 1
a125 1
   directory<string,inode*>::iterator it = cwd->contents.dirents->find(pathname);
@


1.134
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.133 2013-01-19 12:51:07-08 - - $
d125 1
a125 1
   auto it = cwd->contents.dirents->find(pathname);
@


1.133
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.132 2013-01-19 12:47:56-08 - - $
d129 1
@


1.132
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.131 2013-01-19 12:41:32-08 - - $
d127 1
a127 1
      throw yshell_exn("no such file or directory");
@


1.131
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.130 2013-01-19 12:41:05-08 - - $
d151 1
@


1.130
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.129 2013-01-18 15:13:42-08 - - $
d125 1
a125 1
   auto it = cwd->contents.dirents->fine(pathname);
@


1.129
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.125 2013-01-18 13:00:01-08 - - $
d124 9
@


1.128
log
@-
@
text
@a120 2
   auto *d = cwd->contents.dirents;
   auto *f = cwd->contents.contents;
@


1.127
log
@-
@
text
@d96 1
a96 1
      cout << get_inode_nr() <<"       "<< it->size() << " "<< it->first 
d121 2
@


1.126
log
@-
@
text
@d96 1
a96 1
      cout << get_inode_nr() <<"       "<< it.size() << " "<< it->first 
@


1.125
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.124 2013-01-18 12:59:35-08 - - $
d96 1
a96 1
      cout << get_inode_nr() <<"       "<< size() << " "<< it->first 
@


1.124
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.123 2013-01-18 12:59:02-08 - - $
d101 1
a101 1

d107 1
a107 1

@


1.123
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.122 2013-01-18 12:58:31-08 - - $
d138 1
a138 1
   inode *file = new Inode(FILE_INODE);
@


1.122
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.121 2013-01-18 12:37:02-08 - - $
d137 1
a137 1
void inode_state::make_file(inode *file,const wordvec &words){
@


1.121
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.120 2013-01-18 12:35:45-08 - - $
d104 1
a104 1
    (*file->contents.dirents)[filename] = file;
d138 1
@


1.120
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.119 2013-01-18 12:34:15-08 - - $
d104 1
a104 1
    (*contents.dirents)[filename] = file;
@


1.119
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.118 2013-01-18 12:33:36-08 - - $
d104 1
a104 1
    (contents.dirents)[filename] = file;
@


1.118
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.117 2013-01-18 12:30:57-08 - - $
d141 1
a141 1
   (*cwd->contents.dirents)[words[1]] = &file;
@


1.117
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.116 2013-01-18 12:29:10-08 - - $
d104 1
a104 1
    (*cwd->contents.dirents)[filename] = file;
d137 1
a137 1
void inode_state::make_file(inode &file,const wordvec &words){
@


1.116
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.115 2013-01-18 12:19:08-08 - - $
d104 1
a104 1
    (contents.dirents)[filename] = file;
@


1.115
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.114 2013-01-18 11:56:31-08 - - $
d102 1
a102 1
inode::inode *mkfile(const string &filename){
d137 1
a137 1
void inode_state::make_file(inode *file,const wordvec &words){
@


1.114
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.113 2013-01-18 11:39:28-08 - - $
d102 1
a102 1
inode::inode &mkfile(const string &filename){
d105 1
a105 1
    return &file;
d133 2
a134 3
inode inode_state::&get_file(const string &filename){
   inode *file = cwd->mkfile(filename);
   return &file;
@


1.113
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.112 2013-01-18 11:10:46-08 - - $
d133 6
a138 2
void inode_state::make_file(const wordvec &words){
   inode *file = mkfile(words[2]);
d142 1
a142 1
   (*cwd->contents.dirents)[words[1]] = file;
@


1.112
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.111 2013-01-18 11:07:35-08 - - $
d101 1
a101 1
/*
d103 2
a104 2
    inode file(FILE_INODE);
    (*cwd->contents.dirents)[filename] = file;
d106 1
a106 1
}*/
d134 1
a134 1
   inode *file = new inode(FILE_INODE);
a138 4
   for(int j = 0; j < file->contents.data->size(); ++j){
      cout << file->contents.data->at(j) << " ";
   }
   cout << endl;
@


1.111
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.110 2013-01-18 11:05:37-08 - - $
d69 1
a69 1
            size += contents.data[i].size();
@


1.110
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.109 2013-01-18 10:59:28-08 - - $
d140 1
a140 1
      cout << file->contents.data[j] << " ";
@


1.109
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.108 2013-01-18 10:55:42-08 - - $
d135 1
a135 1
   for(int i = 2; i < words.size(); i++){
d139 4
@


1.108
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.107 2013-01-18 10:55:03-08 - - $
d62 11
a72 8
   if(type == DIR_INODE){
      size = contents.dirents->size();
   }
   else{
      hold = contents.data->size();
      for(int i = 0; i<hold; i++){
         size += contents.data[i].size();
      }
a73 1
   size = size + hold - 1;
@


1.107
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.106 2013-01-18 10:44:01-08 - - $
d68 1
a68 1
         size += contents.data[i]->size();
@


1.106
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.105 2013-01-18 10:43:19-08 - - $
d60 1
d63 1
a63 1
        size = contents.dirents->size();
d65 7
@


1.105
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.104 2013-01-18 10:40:20-08 - - $
a124 1
/*
d127 1
a127 1
   }*/
@


1.104
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.103 2013-01-18 10:39:47-08 - - $
d91 1
d94 1
a94 1
    /*(*cwd->contents.dirents)[filename] = file;*/
d96 1
a96 1
}
d124 2
a125 1
   inode *file = &mkfile(words[1]);/*
@


1.103
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.101 2013-01-18 10:38:47-08 - - $
d92 1
a92 1
    inode *file = new inode(FILE_INODE);
@


1.102
log
@-
@
text
@d94 1
a94 1
    return file;
@


1.101
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.100 2013-01-18 10:33:00-08 - - $
d127 1
a127 1
   (*cwd->contents.dirents)[words[i]] = file;
@


1.100
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.99 2013-01-18 10:31:13-08 - - $
d93 2
a94 1
    (*cwd->contents.dirents)[filename] = file;
d125 1
a125 1
      file.contents.data->push_back(words[i]);
d127 1
@


1.99
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.98 2013-01-18 10:30:17-08 - - $
d93 1
a93 1
    (*file->contents.dirents)[filename] = &cwd;
@


1.98
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.97 2013-01-18 10:25:55-08 - - $
d93 1
a93 1
    (*file->contents.dirents)[filename] = cwd;
@


1.97
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.96 2013-01-18 10:25:30-08 - - $
d91 4
a94 1
inode::inode &mkfile(const string &filename);
@


1.96
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.95 2013-01-18 10:24:58-08 - - $
d119 1
a119 1
   inode *file = &mkfile(word[1]);/*
@


1.95
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.94 2013-01-18 10:14:29-08 - - $
d119 1
a119 1
   inode *file = &mkfile(word[1]);
d122 1
a122 1
   }
@


1.94
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.93 2013-01-17 18:39:13-08 - - $
d91 2
d119 1
a119 1
   inode file(FILE_INODE);
@


1.93
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.92 2013-01-17 18:31:32-08 - - $
d116 7
@


1.92
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.91 2013-01-17 18:30:42-08 - - $
d104 1
a104 5
   cwd->inode_print_ls();
 /*for(directory::it = cwd->contents.dirents->begin(); it != end; ++it){
      cout << cwd->get_inode_nr() <<"      "<< it->first <<" " 
      << it->second << endl;
   }*/   
a106 4
int inode_state::inode_nr(){
   int x = cwd->get_inode_nr();
   return x;
}
@


1.91
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.90 2013-01-17 18:09:26-08 - - $
d86 1
a86 1
      cout << get_inode_nr() <<"       "<< it->first 
@


1.90
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.89 2013-01-17 18:06:33-08 - - $
d61 3
@


1.89
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.88 2013-01-17 18:05:33-08 - - $
d84 1
a84 1
      <<" "<<it->second<<endl;
@


1.88
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.87 2013-01-17 18:05:12-08 - - $
d102 1
a102 1
  /* for(directory::it = cwd->contents.dirents->begin(); it != end; ++it){
@


1.87
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.86 2013-01-17 18:04:41-08 - - $
d105 1
a105 1
   }/*   
@


1.86
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.85 2013-01-17 18:02:44-08 - - $
d101 1
a101 1
   cwd->inode_print_ls;
@


1.85
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.84 2013-01-17 18:01:49-08 - - $
d99 1
a99 1
/*
d101 2
a102 2
   directory::end = cwd->contents.dirents->end();
   for(directory::it = cwd->contents.dirents->begin(); it != end; ++it){
d105 2
a106 2
   }   
}*/
@


1.84
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.83 2013-01-17 18:00:49-08 - - $
d83 2
a84 1
      cout << get_inode_nr() <<"       "<< it->first<<" "<<it->second<<endl;
d103 2
a104 1
      cout << cwd->get_inode_nr() <<"      "<< it->first <<" " << it->second << endl;
@


1.83
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.82 2013-01-17 17:47:40-08 - - $
d81 1
a81 1
   directory::it = contents.dirents->begin();
@


1.82
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.81 2013-01-17 17:44:05-08 - - $
d82 1
a82 2
   directory::end = contents.dirents->end();
   for(; it != end; ++it){
@


1.81
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.80 2013-01-17 17:43:35-08 - - $
d80 1
a80 1
void inode::inode_it(){
@


1.80
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.79 2013-01-17 17:42:03-08 - - $
d81 1
a81 1
   directory::const_interator it = contents.dirents->begin();
@


1.79
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.78 2013-01-17 17:29:46-08 - - $
d81 1
a81 1
   directory::it = contents.dirents->begin();
@


1.78
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.77 2013-01-17 17:06:28-08 - - $
d80 7
d99 1
d105 1
a105 1
}
@


1.77
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.76 2013-01-17 16:22:33-08 - - $
d92 7
@


1.76
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.75 2013-01-17 16:21:34-08 - - $
d90 1
d92 3
@


1.75
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.74 2013-01-17 16:18:38-08 - - $
d88 2
a89 2
   (*root->contents.dirents)["."] = theRoot;
   (*root->contents.dirents)[".."] = theRoot;
@


1.74
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.73 2013-01-17 16:18:15-08 - - $
d88 2
a89 2
   (*root->contents.dirents)["."] = &theRoot;
   (*root->contents.dirents)[".."] = &theRoot;
@


1.73
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.72 2013-01-17 16:12:09-08 - - $
d88 2
a89 2
   (*root->contents.dirents)["."] = theRoot;
   (*root->contents.dirents)[".."] = theRoot;
@


1.72
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.71 2013-01-17 16:11:35-08 - - $
d87 4
a90 6
void inode_state::init_state(){
   root->contents.dirents->at("./");
   root->contents.dirents->at("../");
/*root->contents.dirents->insert(pair<string,root*>("./",&theRoot));
root->contents.dirents->insert(pair<string,root*>("../",&theRoot));
*/
@


1.71
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.70 2013-01-17 16:11:13-08 - - $
d89 1
@


1.70
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.69 2013-01-17 16:09:17-08 - - $
d91 1
a91 1
*/	
@


1.69
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.68 2013-01-17 15:59:50-08 - - $
d89 3
a91 2
   //root->contents.dirents->insert(pair<string,root*>("./",&theRoot));
   //root->contents.dirents->insert(pair<string,root*>("../",&theRoot));	
@


1.68
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.67 2013-01-17 15:58:06-08 - - $
d87 4
a90 3
void inode_state::init_state(inode &theRoot){
   root->contents.dirents->insert(pair<string,root*>("./",&theRoot));
   root->contents.dirents->insert(pair<string,root*>("../",&theRoot));	
@


1.67
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.66 2013-01-17 15:53:38-08 - - $
d88 2
a89 2
   root->contents.dirents->insert(pair<string,root*>("./",theRoot));
   root->contents.dirents->insert(pair<string,root*>("../",theRoot));	
@


1.66
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.65 2013-01-17 15:53:01-08 - - $
d87 3
a89 3
void inode_state::init_state(){
   root->contents.dirents->insert(pair<string,root*>("./",root));
   root->contents.dirents->insert(pair<string,root*>("../",root));	
@


1.65
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.64 2013-01-17 15:52:17-08 - - $
d88 2
a89 2
   root->contents.dirents.insert(pair<string,root*>("./",root));
   root->contents.dirents.insert(pair<string,root*>("../",root));	
@


1.64
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.63 2013-01-17 15:49:19-08 - - $
d87 3
a89 3
void inode_state::init_state(inode &theRoot){
   root->contents.dirents.insert(pair<string,root*>("./",&theRoot));
   root->contents.dirents.insert(pair<string,root*>("../",&theRoot));	
@


1.63
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.62 2013-01-17 15:48:36-08 - - $
d88 2
a89 2
   root->contents->dirents.insert(pair<string,root*>("./",&theRoot));
   root->contents->dirents.insert(pair<string,root*>("../",&theRoot));	
@


1.62
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.61 2013-01-17 15:47:54-08 - - $
d88 2
a89 2
   root.contents->dirents.insert(pair<string,root*>("./",theRoot));
   root.contents->dirents.insert(pair<string,root*>("../",theRoot));	
@


1.61
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.60 2013-01-17 15:46:25-08 - - $
d88 2
a89 2
   root->contents->dirents.insert(pair<string,root*>("./",theRoot));
   root->contents->dirents.insert(pair<string,root*>("../",theRoot));	
@


1.60
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.59 2013-01-17 15:42:30-08 - - $
d87 3
a89 3
void inode_state::init_state(){
   root->contents->dirents.insert(pair<string,root*>("./",root));
   root->contents->dirents.insert(pair<string,root*>("../",root));	
@


1.59
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.58 2013-01-17 15:41:41-08 - - $
d88 2
a89 2
   root->contents->dirents.insert(pair<string,root*>("./", &root));
   root->contents->dirents.insert(pair<string,root*>("../",&root));	
@


1.58
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.57 2013-01-17 12:22:10-08 - - $
d88 2
a89 2
   root.contents->dirents.insert(pair<string,root*>(".",root));
   root.contents->dirents.insert(pair<string,root*>("..",root));	
@


1.57
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.56 2013-01-16 20:01:33-08 - - $
d88 2
a89 2
   root->contents->dirents.insert(pair<string,root*>(".",root));
   root->contents->dirents.insert(pair<string,root*>("..",root));	
@


1.56
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.55 2013-01-16 19:58:55-08 - - $
d87 4
@


1.55
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.54 2013-01-16 19:33:10-08 - - $
d81 2
a82 2
inode_state::inode_state(inode &theRoot, inode &theCwd, const string &thePrompt): 
   root (&theRoot), cwd (&theCwd), prompt (thePrompt) {
@


1.54
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.53 2013-01-16 19:27:16-08 - - $
d81 2
a82 1
inode_state::inode_state(inode &theRoot, inode &theCwd, const string &thePrompt): root (theRoot), cwd (theCwd), prompt (thePrompt) {
@


1.53
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.52 2013-01-16 19:26:38-08 - - $
d81 1
a81 1
inode_state::inode_state(): root (NULL), cwd (NULL), prompt ("%") {
a85 5
inode_state::inode_state(inode &theRoot, inode &theCwd, const string &thePrompt){
	root = theRoot;
	cwd = theCwd;
	prompt = thePrompt;
}
@


1.52
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.51 2013-01-16 19:23:12-08 - - $
d86 1
a86 1
inode_state::inode_state(inode theRoot, inode theCwd, const string &thePrompt){
@


1.51
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.50 2013-01-16 19:22:13-08 - - $
d86 1
a86 1
inode_state::inode_state(inode &theRoot, inode &theCwd, const string &thePrompt){
@


1.50
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.49 2013-01-16 19:20:05-08 - - $
d86 1
a86 1
inode_state::inode_state(inode theRoot, inode theCwd, const string &thePrompt){
@


1.49
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.48 2013-01-16 19:18:44-08 - - $
d87 2
a88 2
	root = &theRoot;
	cwd = &theCwd;
@


1.48
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.47 2013-01-16 19:18:16-08 - - $
d86 3
a88 3
inode_state::inode_state(inode &theRoot, inode &theCwd, const string &thePrompt){
	root = theRoot;
	cwd = theCwd;
@


1.47
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.46 2013-01-16 19:17:36-08 - - $
d87 1
a87 1
	root; = theRoot;
@


1.46
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.45 2013-01-16 19:14:19-08 - - $
d86 1
a86 1
inode_state::inode_state(const inode &theRoot,const inode &theCwd, const string &thePrompt){
@


1.45
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.43 2013-01-16 19:12:33-08 - - $
d86 1
a86 1
inode_state::inode_state(inode &theRoot, inode &theCwd, const string &thePrompt){
@


1.44
log
@-
@
text
@d87 3
a89 3
	root(theRoot); //= theRoot;
	cwd(theCwd);  //= theCwd;
	prompt(thePrompt); //= thePrompt;
@


1.43
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.42 2013-01-16 19:11:45-08 - - $
d89 1
a89 1
	prompt(thePrompt) //= thePrompt;
@


1.42
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.41 2013-01-16 19:06:09-08 - - $
d88 2
a89 2
	cwd (theCwd)//= theCwd;
	prompt (thePrompt) //= thePrompt;
@


1.41
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.40 2013-01-16 18:18:06-08 - - $
d87 3
a89 3
	root = theRoot;
	cwd = theCwd;
	prompt = thePrompt;
@


1.40
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.25 2013-01-16 14:33:24-08 - - $
d86 6
@


1.39
log
@-
@
text
@a93 8
void inode_state::set_root(){
   inode the_root = new inode(DIR_INODE);
   root* = &the_root;
   the_root.contents.dirents->insert(pair<string, inode*>("./",root));
   the_root.contents.dirents->insert(pair<string, inode*>("../",root));
   cwd = root;
}

@


1.38
log
@-
@
text
@d96 1
a96 1
   root* = &the_root
@


1.37
log
@-
@
text
@d97 2
a98 2
   the_root->contents.dirents->insert(pair<string, inode*>("./",root));
   the_root->contents.dirents->insert(pair<string, inode*>("../",root));
@


1.36
log
@-
@
text
@d96 3
a98 2
   root->contents.dirents->insert(pair<string, inode*>("./",the_root));
   root->contents.dirents->insert(pair<string, inode*>("../",the_root));
@


1.35
log
@-
@
text
@d95 1
a95 1
   inode the_root = new inode(DIR_NAME);
@


1.34
log
@-
@
text
@d93 1
a93 1
/*
d95 3
a97 2
   root->contents.dirents->insert(pair<string, inode*>("./",root));
   root->contents.dirents->insert(pair<string, inode*>("../",root));
d99 1
a99 1
}*/
@


1.33
log
@-
@
text
@d93 1
a93 1

d98 1
a98 1
}
@


1.32
log
@-
@
text
@d97 1
@


1.31
log
@-
@
text
@d95 2
a96 2
	root->contents.dirents->insert(pair<string, inode*>("./",root));
	root->contents.dirents->insert(pair<string, inode*>("../",root));
@


1.30
log
@-
@
text
@a52 5
inode::inode(){
	contents.dirents.at["./"];
	contents.dirents.at["../"];
}

d94 5
@


1.29
log
@-
@
text
@d54 2
a55 2
	contents->dirents.at["./"];
	contents->dirents.at["../"];
@


1.28
log
@-
@
text
@d55 1
a55 1
	contenst->dirents.at["../"];
@


1.27
log
@-
@
text
@d53 4
@


1.26
log
@-
@
text
@a52 5
inode::inode(){
  contents.derents->at["./"];
  contents.derents->at["../"];
}

@


1.25
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.24 2013-01-16 14:32:05-08 - - $
d53 5
@


1.24
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.18 2013-01-16 10:17:47-08 - - $
a93 5
/*
void inode_state::initialize_state(){
   contents->dirents.insert(pair<string, inode*>("./",root));
   contents->dirents.insert(pair<string, inode*>("../",root));	
}*/
@


1.23
log
@-
@
text
@a80 4
directory inode::get_dirents(){
	return contents.dirents;
}

d94 5
a98 6

void inode_state::intialize_state(){
   dirents = get_dirents();  
   dirents.insert(pair<string, inode*>("./",root));
   dirents.insert(pair<string, inode*>("../",root));	
}
@


1.22
log
@-
@
text
@d82 1
a82 1
	return contents->dirents;
@


1.21
log
@-
@
text
@d81 4
d99 2
a100 1
void inode_state::intialize_state(){  
@


1.20
log
@-
@
text
@d95 3
a97 3
void inode_state::intialize_state(){
   contents->dirents.insert(pair<string, inode*>("./",root));
   contents->dirents.insert(pair<string, inode*>("../",root));	
@


1.19
log
@-
@
text
@d97 1
a97 1
   contents->dirents.insert(pair<string, indoe*>("../",root));	
@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.17 2013-01-16 10:15:49-08 - - $
d95 5
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.15 2013-01-16 10:05:08-08 - - $
d91 1
a91 1
string inode_state::return_promp(){
@


1.16
log
@-
@
text
@d91 4
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.12 2013-01-15 14:58:08-08 - - $
d88 1
a88 1
	prompt = the_prompt;	
@


1.14
log
@-
@
text
@d87 1
a87 1
void inode_state::get_prompt(const string &the_prompt){
@


1.13
log
@-
@
text
@d87 1
a87 1
void get_prompt(const string &the_prompt){
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.8 2013-01-14 19:33:47-08 - - $
d87 4
@


1.11
log
@-
@
text
@a86 4
void intial_state(inode_state &state){
	contents->dirents.insert(pair<string,inode *>("./",root));
	contents->dirents.insert(pair<string,inode *>("../",root));
}
@


1.10
log
@-
@
text
@d87 1
a87 1
void intial_state(){
@


1.9
log
@-
@
text
@d89 1
a89 1
	contents->dirents.insert(pait<string,inode *>("../",root));
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.7 2013-01-14 19:24:33-08 - - $
d87 5
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.6 2013-01-14 19:23:54-08 - - $
a80 4
void intialize_state(inode_state &state){
   contents->dirents.insert(pair<string,inode*>("./",root));
   contents->dirents.insert(pair<string,inode*>("../",root));
}
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.5 2013-01-14 19:23:03-08 - - $
d82 2
a83 2
   contents->dirents.insert(pair<string,inode*>("./",state->root));
   contents->dirents.insert(pair<string,inode*>("../",state->root));
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.4 2013-01-14 19:15:06-08 - - $
d82 2
a83 2
   state.root->contents->dirents.insert(pair<string,inode*>("./",state->root));
   state.root->contents->dirents.insert(pair<string,inode*>("../",state->root));
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.3 2013-01-14 19:12:46-08 - - $
d81 5
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.2 2013-01-14 19:11:16-08 - - $
a80 5
void intialize_state(inode_state &state){
	state.contents->dirents.insert(pairs<string,inode*>("./",root));
	state.contents->dirents.insert(pairs<string,inode*>("../",root));
}

@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.1 2013-01-09 17:34:19-08 - - $
d81 3
a83 3
void intialize_state(){
	contents->dirents.insert(pairs<string,inode*>("./",root));
	contents->dirents.insert(pairs<string,inode*>("../",root));
d85 1
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.2 2012-03-29 17:31:42-07 - - $
d81 4
@
